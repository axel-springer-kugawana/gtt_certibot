---
AWSTemplateFormatVersion: 2010-09-09
Description: Lambda / Cloudformation custom resources
Parameters:
  RestApiId:
    Type: String
  ResourceId:
    Type: String
  IntegrationUriArn:
    Type: String
Resources:
  SlackEventMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      RestApiId: !Ref 'RestApiId'
      ResourceId: !Ref 'ResourceId'
      Integration:
        Type: AWS
        Uri: !Ref 'IntegrationUriArn'
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"text": "_Processing your request..._"}'
        RequestParameters:
          integration.request.header.X-Amz-Invocation-Type: "'Event'"
        RequestTemplates:
          application/x-www-form-urlencoded: "## convert HTML POST data or HTTP GET query string to JSON\n
 \n
## get the raw post data from the AWS built-in variable and give it a nicer name\n
#if ($context.httpMethod == \"POST\")\n
 #set($rawAPIData = $input.path(\"$\"))\n
#elseif ($context.httpMethod == \"GET\")\n
 #set($rawAPIData = $input.params().querystring)\n
 #set($rawAPIData = $rawAPIData.toString())\n
 #set($rawAPIDataLength = $rawAPIData.length() - 1)\n
 #set($rawAPIData = $rawAPIData.substring(1, $rawAPIDataLength))\n
 #set($rawAPIData = $rawAPIData.replace(\", \", \"&\"))\n
\n
#else\n
 #set($rawAPIData = \"\")\n
#end\n
 \n
## Work around for Slack's stupidity:\n
#set($rawAPIData = $rawAPIData.replace(\"%26amp%3B\", \"%26\"))\n
#set($rawAPIData = $rawAPIData.replace(\"%26gt%3B\", \"%3C\"))\n
#set($rawAPIData = $rawAPIData.replace(\"%26lt%3B\", \"%3E\"))\n
 \n
## first we get the number of \"&\" in the string, this tells us if there is more than one key value pair\n
#set($countAmpersands = $rawAPIData.length() - $rawAPIData.replace(\"&\", \"\").length())\n
 \n
## if there are no \"&\" at all then we have only one key value pair.\n
## we append an ampersand to the string so that we can tokenise it the same way as multiple kv pairs.\n
## the \"empty\" kv pair to the right of the ampersand will be ignored anyway.\n
#if ($countAmpersands == 0)\n
 #set($rawPostData = $rawAPIData + \"&\")\n
#end\n
 \n
## now we tokenise using the ampersand(s)\n
#set($tokenisedAmpersand = $rawAPIData.split(\"&\"))\n
 \n
## we set up a variable to hold the valid key value pairs\n
#set($tokenisedEquals = [])\n
 \n
## now we set up a loop to find the valid key value pairs, which must contain only one \"=\"\n
#foreach( $kvPair in $tokenisedAmpersand )\n
 #set($countEquals = $kvPair.length() - $kvPair.replace(\"=\", \"\").length())\n
 #if ($countEquals == 1)\n
  #set($kvTokenised = $kvPair.split(\"=\"))\n
    #if ( ($kvTokenised.size() == 2) && ($kvTokenised[0].length() > 0) )\n
   ## we found a valid key value pair. add it to the list.\n
   #set($devNull = $tokenisedEquals.add($kvPair))\n
  #end\n
 #end\n
#end\n
 \n
## next we set up our loop inside the output structure \"{\" and \"}\"\n
{\n
#foreach( $kvPair in $tokenisedEquals )\n
  ## finally we output the JSON for this pair and append a comma if this isn't the last pair\n
  #set($kvTokenised = $kvPair.split(\"=\"))\n
 \"$util.urlDecode($kvTokenised[0])\" : #if($kvTokenised.size() > 1 && $kvTokenised[1].length() > 0)\"$util.urlDecode($kvTokenised[1])\"#{else}\"\"#end#if( $foreach.hasNext ),#end\n
#end\n
}"
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          StatusCode: 200
