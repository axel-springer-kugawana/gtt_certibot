---
AWSTemplateFormatVersion: 2010-09-09
Description: Lambda / Cloudformation custom resources
Parameters:
  Organization:
    Type: String
  Team:
    Type: String
  Env:
    Type: String
  CodeS3ObjectVersion:
    Type: String
  GitRevision:
    Type: String
Resources:

  # Lambda
  CertibotLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub '${Organization}-${Team}-${Env}-tools'
        S3Key: !Sub 'lambdas/${Organization}-${Team}-certibot.zip'
        S3ObjectVersion: !Ref CodeS3ObjectVersion
      Handler: lambda_handler.handler
      MemorySize: 128
      Role: !Sub '${CertibotRole.Arn}'
      Runtime: python3.6
      Timeout: 60
      Description: Kugawana GitHub inventory
      Environment:
        Variables:
          ENV: !Ref Env
          GIT_REVISION: !Ref GitRevision
    DependsOn:
      - CertibotRole
  CertibotPermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: CertibotLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CertibotApi}/*'
    DependsOn:
      - CertibotApi
  CertibotRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F3
            reason: Allow all resources action
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: lambda
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: >-
                  arn:aws:secretsmanager:eu-west-1:*:secret:prod/gtt/certibot*
              - Effect: Allow
                Action: logs:*
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action: dynamodb:*
                Resource: 'arn:aws:dynamodb:*:*:*'

  # Schedule for reporting
  CertibotAdminReportScheduledRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Certibot admin report trigger
      ScheduleExpression: cron(0 8 ? * 2-6 *)
      State: ENABLED
      Targets:
        - Arn: !Sub '${CertibotLambda.Arn}'
          Id: TargetFunctionV1
          Input: "{\"report\":\"admin\"}"
    DependsOn:
      - CertibotLambda
  CertibotAdminReportPermissionForEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
        Ref: CertibotLambda
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !Sub '${CertibotAdminReportScheduledRule.Arn}'

  CertibotUserReportScheduledRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Certibot user report trigger
      ScheduleExpression: cron(0 10 ? * 2 *)
      State: ENABLED
      Targets:
        - Arn: !Sub '${CertibotLambda.Arn}'
          Id: TargetFunctionV1
          Input: "{\"report\":\"user\"}"
    DependsOn:
      - CertibotLambda
  CertibotUserReportPermissionForEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
        Ref: CertibotLambda
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !Sub '${CertibotUserReportScheduledRule.Arn}'

  # ApiGateway Account
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !Sub '${ApiGatewayRole.Arn}'
  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: logs:*
                Resource: 'arn:aws:logs:*:*:*'

  # API Gateway
  CertibotApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: CertibotApi
      Description: API Gateway for Certibot
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref APiGatewayDeployement
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: '/*'
      RestApiId: !Ref CertibotApi
      StageName: LATEST
  APiGatewayDeployement:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref CertibotApi
      StageName: DummyStage
    DependsOn:
      - VouchersMethod

  EventHandlerResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref CertibotApi
      ParentId: !Sub '${CertibotApi.RootResourceId}'
      PathPart: event-handler
  EventHandlerMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Sub '${EventHandlerResource}'
      RestApiId: !Ref CertibotApi
      Integration:
        Type: AWS
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CertibotLambda.Arn}/invocations'
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          StatusCode: 200
    DependsOn:
      - CertibotLambda

  VouchersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref CertibotApi
      ParentId: !Sub '${CertibotApi.RootResourceId}'
      PathPart: vouchers
  VouchersMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Sub '${VouchersResource}'
      RestApiId: !Ref CertibotApi
      Integration:
        Type: AWS
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CertibotLambda.Arn}/invocations'
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"text": "_Processing your request..._"}'
        RequestParameters:
          integration.request.header.X-Amz-Invocation-Type: "'Event'"
        RequestTemplates:
          application/x-www-form-urlencoded: "## convert HTML POST data or HTTP GET query string to JSON\n
 \n
## get the raw post data from the AWS built-in variable and give it a nicer name\n
#if ($context.httpMethod == \"POST\")\n
 #set($rawAPIData = $input.path(\"$\"))\n
#elseif ($context.httpMethod == \"GET\")\n
 #set($rawAPIData = $input.params().querystring)\n
 #set($rawAPIData = $rawAPIData.toString())\n
 #set($rawAPIDataLength = $rawAPIData.length() - 1)\n
 #set($rawAPIData = $rawAPIData.substring(1, $rawAPIDataLength))\n
 #set($rawAPIData = $rawAPIData.replace(\", \", \"&\"))\n
\n
#else\n
 #set($rawAPIData = \"\")\n
#end\n
 \n
## Work around for Slack's stupidity:\n
#set($rawAPIData = $rawAPIData.replace(\"%26amp%3B\", \"%26\"))\n
#set($rawAPIData = $rawAPIData.replace(\"%26gt%3B\", \"%3C\"))\n
#set($rawAPIData = $rawAPIData.replace(\"%26lt%3B\", \"%3E\"))\n
 \n
## first we get the number of \"&\" in the string, this tells us if there is more than one key value pair\n
#set($countAmpersands = $rawAPIData.length() - $rawAPIData.replace(\"&\", \"\").length())\n
 \n
## if there are no \"&\" at all then we have only one key value pair.\n
## we append an ampersand to the string so that we can tokenise it the same way as multiple kv pairs.\n
## the \"empty\" kv pair to the right of the ampersand will be ignored anyway.\n
#if ($countAmpersands == 0)\n
 #set($rawPostData = $rawAPIData + \"&\")\n
#end\n
 \n
## now we tokenise using the ampersand(s)\n
#set($tokenisedAmpersand = $rawAPIData.split(\"&\"))\n
 \n
## we set up a variable to hold the valid key value pairs\n
#set($tokenisedEquals = [])\n
 \n
## now we set up a loop to find the valid key value pairs, which must contain only one \"=\"\n
#foreach( $kvPair in $tokenisedAmpersand )\n
 #set($countEquals = $kvPair.length() - $kvPair.replace(\"=\", \"\").length())\n
 #if ($countEquals == 1)\n
  #set($kvTokenised = $kvPair.split(\"=\"))\n
    #if ( ($kvTokenised.size() == 2) && ($kvTokenised[0].length() > 0) )\n
   ## we found a valid key value pair. add it to the list.\n
   #set($devNull = $tokenisedEquals.add($kvPair))\n
  #end\n
 #end\n
#end\n
 \n
## next we set up our loop inside the output structure \"{\" and \"}\"\n
{\n
#foreach( $kvPair in $tokenisedEquals )\n
  ## finally we output the JSON for this pair and append a comma if this isn't the last pair\n
  #set($kvTokenised = $kvPair.split(\"=\"))\n
 \"$util.urlDecode($kvTokenised[0])\" : #if($kvTokenised.size() > 1 && $kvTokenised[1].length() > 0)\"$util.urlDecode($kvTokenised[1])\"#{else}\"\"#end#if( $foreach.hasNext ),#end\n
#end\n
}"
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          StatusCode: 200
    DependsOn:
      - CertibotLambda
