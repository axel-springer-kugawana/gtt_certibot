---
AWSTemplateFormatVersion: 2010-09-09
Description: Lambda / Cloudformation custom resources
Parameters:
  Organization:
    Type: String
  Team:
    Type: String
  Env:
    Type: String
  CodeS3ObjectVersion:
    Type: String
  GitRevision:
    Type: String
Resources:

  # Lambda
  YabotLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Sub '${Organization}-${Team}-${Env}-tools'
        S3Key: !Sub 'lambdas/${Organization}-${Team}-yabot.zip'
        S3ObjectVersion: !Ref CodeS3ObjectVersion
      Handler: lambda_handler.handler
      MemorySize: 128
      Role: !Sub '${YabotRole.Arn}'
      Runtime: python3.6
      Timeout: 60
      Description: Kugawana GitHub inventory
      Environment:
        Variables:
          ENV: !Ref Env
          GIT_REVISION: !Ref GitRevision
    DependsOn:
      - YabotRole
  YabotRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F3
            reason: Allow all resources action
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: lambda
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'secretsmanager:GetSecretValue'
                Resource: >-
                  arn:aws:secretsmanager:eu-west-1:*:secret:prod/gtt/yabot*
              - Effect: Allow
                Action: 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
  YabotPermissionForEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName:
        Ref: YabotLambda
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${YabotApi}/*'
    DependsOn:
      - YabotApi

  # API Gateway
  YabotApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: YabotApi
      Description: API Gateway for Yabot

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !Sub '${ApiGatewayRole.Arn}'

  ApiGatewayRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref APiGatewayDeployement
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          ResourcePath: '/*'
      RestApiId: !Ref YabotApi
      StageName: LATEST
  APiGatewayDeployement:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref YabotApi
      StageName: DummyStage
    DependsOn:
      - YabotMethod
  EventHandlerResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref YabotApi
      ParentId: !Sub '${YabotApi.RootResourceId}'
      PathPart: event-handler
  YabotMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Sub '${EventHandlerResource}'
      RestApiId: !Ref YabotApi
      Integration:
        Type: AWS
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${YabotLambda.Arn}/invocations'
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          StatusCode: 200
    DependsOn:
      - YabotLambda
